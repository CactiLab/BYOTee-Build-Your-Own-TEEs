#!/usr/bin/env python3

import os
import subprocess
import argparse

# the directory to mount the sd card to
BOOT_MNT = '/media/vagrant/boot'
AUDIO_MNT = '/media/vagrant/root'

# the names to copy the boot and mes files to on the sd card
BOOT_FILE = 'BOOT.bin'
MIPOD_BIN_FILE = "miPod.bin"


def copy_file(src, dst):
    """
    This function copies a files from the src path to the destination path.
    This is used for copying files to the sd card.

    src: a path to the source file to copy.
    dst: a path to the destination file to copy.
    """

    if not os.path.isfile(src):
        raise IOError("File does not exist: %s" % (src))

    subprocess.check_call("sudo cp %s %s" % (src, dst), shell=True)


def setup_sdcard(device):
    """
    This function sets up the sd card by formatting it with the correct
    partitions and the correct filesystems. It uses the sfdisk format file
    which can be found in the ectf_sd.fdisk file in this directory.

    device: the path to the device to be formatted, ie /dev/sdb. This must be
            the overall device, not a partition on the device.
    """

    print("Formatting SD Card...")
    # format sd card and create filesystems
    subprocess.check_call("sudo sfdisk --force %s < ectf_sd.sfdisk > /dev/null" % (device), shell=True)
    subprocess.check_call("sudo mkfs.fat -F 32 -n BOOT -I %s1 > /dev/null" % (device), shell=True)
    subprocess.check_call("sudo mkfs.ext4 -L root %s2 > /dev/null" % (device), shell=True)

    print("Done Formatting SD Card")
    print("    BOOT : %s1" % (device))
    print("    root : %s2 " % (device))


def copy_audio(device, audio):
    """
    This function copies all the audio files from the specified audio directory
    to the device specified.

    device: the device path to copy the audio to, ie /dev/sdb.
    audio: the path to the directory that contains the audio files to copy to
           the sd card. This script will copy ALL regular files in the root of
           the specified directory, so make sure it is a clean directory.
    """

    print("Copying audio Files...")
    # mount sd card
    subprocess.check_call("sudo mkdir -p %s" % (AUDIO_MNT), shell=True)
    subprocess.check_call("sudo mount %s2 %s" % (device, AUDIO_MNT), shell=True)

    # copy each file specified in audio directory
    src_files = os.listdir(audio)
    for file_name in src_files:
        full_path = os.path.join(audio, file_name)
        try:
            print("    %s-> %s2/" % (full_path, device))
            copy_file(full_path, AUDIO_MNT)
        except IOError as e:
            print(e)
            subprocess.check_call("sudo umount %s" % (AUDIO_MNT), shell=True)
            exit(1)

    # cleanup
    subprocess.check_call("sudo umount %s" % (AUDIO_MNT), shell=True)

    print("Done copying audio to SD Card")


def copy_boot(device, boot_path, mipod_bin_path=None):
    """
    This function copies the boot file from the specified file paths
    to the device specified. The device is the overall device and it will copy
    the specified files to the first partition (the boot partition).

    device: the path to the device to copy the audio to, ie /dev/sdb.
    boot_path: The path to the boot file to use. This will always copy
            the file with the name BOOT_FILE specified above.
    """

    print("Copying images to SD Card...")

    # mount sd card
    subprocess.check_call("sudo mkdir -p %s" % (BOOT_MNT), shell=True)
    subprocess.check_call("sudo mount %s1 %s" % (device, BOOT_MNT), shell=True)

    # copy boot binary
    try:
        print("    %s-> %s" % (boot_path, os.path.join(device + "1", BOOT_FILE)))
        copy_file(boot_path, os.path.join(BOOT_MNT, BOOT_FILE))
        if mipod_bin_path is not None:
                print("    %s-> %s" % (boot_path, os.path.join(device + "1", MIPOD_BIN_FILE)))
                copy_file(mipod_bin_path, os.path.join(BOOT_MNT, MIPOD_BIN_FILE))
    except IOError as e:
        print(e)
        subprocess.check_call("sudo umount %s" % (BOOT_MNT), shell=True)
        exit(1)

    # cleanup
    subprocess.check_call("sudo umount %s" % (BOOT_MNT), shell=True)


def copy_mipod(device, path):
    """This function copies the mipod application to the SD card"""
    print("Copying mipod application...")
    # mount sd card
    subprocess.check_call("sudo mount %s2 %s" % (device, AUDIO_MNT), shell=True)

    try:
        print("    %s-> %s2/" % (path, device))
        copy_file(path, "%s/miPod" % (AUDIO_MNT,))
    except IOError as e:
        print(e)
        subprocess.check_call("sudo umount %s" % (AUDIO_MNT), shell=True)
        exit(1)

    # cleanup
    subprocess.check_call("sudo umount %s" % (AUDIO_MNT), shell=True)

    print("Done copying mipod application to SD Card")


def copy_imageub(device, path):
    """This function copies the mipod application to the SD card"""
    print("Copying image.ub...")
    # mount sd card
    subprocess.check_call("sudo mount %s1 %s" % (device, BOOT_MNT), shell=True)

    try:
        print("    %s-> %s1/" % (path, device))
        copy_file(path, BOOT_MNT)
    except IOError as e:
        print(e)
        subprocess.check_call("sudo umount %s" % (BOOT_MNT), shell=True)
        exit(1)

    # cleanup
    subprocess.check_call("sudo umount %s" % (BOOT_MNT), shell=True)

    print("Done copying image.ub")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('device',
                        help=("This is the SD device to deploy the "
                              "system on to."))
    parser.add_argument('boot_path',
                        help=("This is the path to the main file to boot the "
                              "system."))
    parser.add_argument('audio',
                        help=("This is the directory where provision audio "
                              "files are stored."))
    parser.add_argument("mipod",
                        help=("This is the path to the mipod application"))
    parser.add_argument("imageub",
                        help=("The path to image.ub, the petalinux filesystem"))

    parser.add_argument('--mipod-bin-path',
                        help=("This is the path to the miPod.BIN file to boot the "
                              "system. This will contain your bitstream."),
                        required=False,
                        default=None)
    parser.add_argument('--noformat',
                        action="store_true",
                        help=("This is an optional argument. "
                              "If it is specified, then the SD card will not "
                              "be formatted. Caution, if the sd card is "
                              "not already formatted correctly, this "
                              "script will fail."))
    args = parser.parse_args()

    # verify boot bin
    boot_file = args.boot_path
    if not os.path.isfile(boot_file):
        print("Unable to open %s. You must copy the provided BOOT.bin to "
              "that location in order to run this script" % (boot_file))
        exit(2)

    if args.mipod_bin_path is not None:
        if not os.path.isfile(args.mipod_bin_path):
            print("Unable to open %s. You must copy your miPod.bin to "
                  "that location in order to run this script" % (boot_file))
            exit(2)

    # verify device
    if not os.path.exists(args.device):
        print("Error, SD device does not exist: %s" % (args.device))
        exit(2)
    # verify audio folder
    if not os.path.isdir(args.audio):
        print("Error, audio directory doesn't exist: %s" % (args.audio))
        exit(2)

    # unmount sd card just in case
    subprocess.call("sudo umount %s* &> /dev/null" % (args.device), shell=True)

    # build images and provision sd card
    if not args.noformat:
        setup_sdcard(args.device)

    copy_boot(args.device, boot_file, args.mipod_bin_path)
    copy_audio(args.device, args.audio)
    copy_mipod(args.device, args.mipod)
    copy_imageub(args.device, args.imageub)

    exit(0)


if __name__ == '__main__':
    main()
