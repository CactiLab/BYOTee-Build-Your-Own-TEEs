#!/usr/bin/env python3
"""
Description: Generates system wide secrets containing all potential regions
Use: Once per ecosystem of devices
"""
import json
import os, sys
from argparse import ArgumentParser
import random, string

def replace_AES_key(aes_key):
    run_dir = sys.path[0]
    command = run_dir + "/replace_AES_key.sh " + aes_key.hex() + " " + run_dir
    os.system(command)
    print("Finishing aes key initialization.")

def main(region_dict, file_name):
    try:
        secrets = open(file_name, "w")
    except Exception as e:
        print("Unable to open secrets file: %s" % (e,))
        return 0

    mipodKey = os.urandom(64)
    # aes_key = "".join(random.choices(string.ascii_letters + string.digits, k=16))
    aes_key = os.urandom(16)

    replace_AES_key(aes_key)
   
    nested_dic = {}
    nested_dic ["regions"] =  region_dict
    nested_dic ["mipod_key"] = ", ".join([  str(keyByte)  for keyByte in mipodKey])
    # nested_dic ["aes_key"] = aes_key
    nested_dic ["aes_key"] = ", ".join([  str(keyByte)  for keyByte in aes_key])

    #nested_dic = {"d" : mipod_secrets}
   # print(nested_dic)
    json.dump(nested_dic, secrets)
    secrets.close()


def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--region-list', help='list of regions for provisioning purposes',
                        required=True, nargs='+')
    parser.add_argument('--outfile', help='file to save region secrets to', required=True)
    args = parser.parse_args()
    return args.region_list, args.outfile


if __name__ == '__main__':
    region_list, outfile = get_args()
    print("generating system specific secrets")
    regions = {region: num for num, region in enumerate(region_list)}  # Create region IDs based on increasing integers
    main(regions, outfile)
