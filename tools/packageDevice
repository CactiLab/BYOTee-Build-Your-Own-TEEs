#!/usr/bin/env python3

import os
import subprocess
import argparse

TEMPORARY_BIF = ".temporary.bif"


def build_system(bif, outpath, bitstream_path, secure=False):
    """Build the system according to the bif file using bootgen. Bootgen is a
    provided petalinux utility and packages the provided images into a boot
    image. For more information about how bootgen builds the image, see page
    55 of the link below.

    https://www.xilinx.com/support/documentation/user_guides/ug821-zynq-7000-swdev.pdf

    bif: The path to the boot image file (.bif) file. This must be valid BIF format
        as specified in the petalinux software development guide.
    """

    print("Building %s" % outpath)

    with open(bif, 'r') as f:
        data = f.read()
    data = data.replace("BITSTREAM_GOES_HERE", bitstream_path)
    with open(TEMPORARY_BIF, 'w') as f:
        f.write(data)

    # build boot binary using bootgen
    if not secure:
        cmd = "bootgen -image %s -arch zynq -o %s -w"  % (TEMPORARY_BIF, outpath)
    # This is done by the organizers only
    else:
        cmd = "bootgen -image %s -arch zynq -o %s -w -encrypt efuse" % (TEMPORARY_BIF, outpath)
    subprocess.check_call(cmd, shell=True)

    print("Done building %s" % outpath)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('bif', help=("This is the .bif file to create the miPod.BIN."))
    parser.add_argument("outpath", help=("The path to output the miPod.bin to."))
    parser.add_argument("bitstream", help="The path to your bitstream")
    parser.add_argument("--secure",
                        action="store_true",
                        help="If present, encrypt and authenticate the partitions with hardware keys. This will be done by MITRE and does not need to be done in your reference design.")
    args = parser.parse_args()

    # verify bif exists
    if not os.path.isfile(args.bif):
        print("Unable to open BIF file : %s" % (args.bif))
        exit(2)

    build_system(args.bif, args.outpath, args.bitstream, secure=args.secure)


if __name__ == '__main__':
    main()
